"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const tslib_1 = require("tslib");
class User {
    constructor(client) {
        this.client = client;
    }
    getUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/user',
                method: 'GET',
                params: {
                    key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
                    username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAnonymousUser(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/user/anonymous',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCurrentUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/user/current',
                method: 'GET',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGroupMembershipsForUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/user/memberof',
                method: 'GET',
                params: {
                    key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
                    username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentWatchStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/user/watch/content/${parameters.contentId}`,
                method: 'GET',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addContentWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/user/watch/content/${parameters.contentId}`,
                method: 'POST',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeContentWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/user/watch/content/${parameters.contentId}`,
                method: 'DELETE',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    isWatchingSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/user/watch/space/${parameters.spaceKey}`,
                method: 'GET',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addSpaceWatch(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/user/watch/space/${parameters.spaceKey}`,
                method: 'POST',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeSpaceWatch(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/user/watch/space/${parameters.spaceKey}`,
                method: 'DELETE',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.User = User;
//# sourceMappingURL=user.js.map