"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Space = void 0;
const tslib_1 = require("tslib");
class Space {
    constructor(client) {
        this.client = client;
    }
    getSpaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/space',
                method: 'GET',
                params: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                    type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    label: parameters === null || parameters === void 0 ? void 0 : parameters.label,
                    favourite: parameters === null || parameters === void 0 ? void 0 : parameters.favourite,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/space',
                method: 'POST',
                data: {
                    key: parameters.key,
                    name: parameters.name,
                    description: parameters.description,
                    permissions: parameters.permissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createPrivateSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/space/_private',
                method: 'POST',
                data: {
                    key: parameters.key,
                    name: parameters.name,
                    description: parameters.description,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    homepage: parameters.homepage,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentForSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/content`,
                method: 'GET',
                params: {
                    depth: parameters.depth,
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentByType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/content/${parameters.type}`,
                method: 'GET',
                params: {
                    depth: parameters.depth,
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSpaceProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/property`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createSpaceProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/property`,
                method: 'POST',
                data: {
                    key: parameters.key,
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSpaceProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/property/${parameters.key}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createSpacePropertyForKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/property/${parameters.key}`,
                method: 'POST',
                data: {
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateSpaceProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/property/${parameters.key}`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteSpaceProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/space/${parameters.spaceKey}/property/${parameters.key}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Space = Space;
//# sourceMappingURL=space.js.map