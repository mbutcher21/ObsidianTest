"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Content = void 0;
const tslib_1 = require("tslib");
class Content {
    constructor(client) {
        this.client = client;
    }
    getContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/content',
                method: 'GET',
                params: {
                    type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                    title: parameters === null || parameters === void 0 ? void 0 : parameters.title,
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    postingDay: parameters === null || parameters === void 0 ? void 0 : parameters.postingDay,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/content',
                method: 'POST',
                params: {
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
                data: Object.assign(Object.assign({}, parameters), { status: undefined, expand: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}`,
                method: 'PUT',
                params: {
                    status: parameters.status,
                    conflictPolicy: parameters.conflictPolicy,
                },
                data: Object.assign(Object.assign({}, parameters), { status: undefined, conflictPolicy: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}`,
                method: 'GET',
                params: {
                    status: parameters.status,
                    version: parameters.version,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}`,
                method: 'DELETE',
                params: {
                    status: parameters.status,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getHistory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/history`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getMacroBodyByHash(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/history/${parameters.version}/macro/hash/${parameters.hash}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getMacroBodyByMacroId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/history/${parameters.version}/macro/id/${parameters.macroId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/content/search',
                method: 'GET',
                params: {
                    cql: parameters === null || parameters === void 0 ? void 0 : parameters.cql,
                    cqlcontext: parameters === null || parameters === void 0 ? void 0 : parameters.cqlcontext,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentChildren(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/child`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    parentVersion: parameters.parentVersion,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentChildrenByType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/child/${parameters.type}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    parentVersion: parameters.parentVersion,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentComments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/child/comment`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    parentVersion: parameters.parentVersion,
                    start: parameters.start,
                    limit: parameters.limit,
                    location: parameters.location,
                    depth: parameters.depth,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAttachments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/child/attachment`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                    filename: parameters.filename,
                    mediaType: parameters.mediaType,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createAttachments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/child/attachment`,
                method: 'POST',
                headers: {
                    'Content-Type': 'multipart/form-data',
                    'X-Atlassian-Token': 'nocheck',
                },
                params: {
                    status: parameters.status,
                },
                data: Object.assign(Object.assign({}, parameters), { id: undefined, status: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateAttachmentProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/child/attachment/${parameters.attachmentId}`,
                method: 'PUT',
                data: Object.assign(Object.assign({}, parameters), { id: undefined, attachmentId: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateAttachmentData(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/child/attachment/${parameters.attachmentId}/data`,
                method: 'POST',
                headers: {
                    'Content-Type': 'multipart/form-data',
                    'X-Atlassian-Token': 'nocheck',
                },
                data: Object.assign(Object.assign({}, parameters), { id: undefined, attachmentId: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentDescendants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/descendant`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentDescendantsOfType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/descendant/${parameters.type}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentLabels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/label`,
                method: 'GET',
                params: {
                    prefix: parameters.prefix,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addLabelsToContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/label`,
                method: 'POST',
                data: parameters.labels,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteLabelWithQueryParam(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/label`,
                method: 'DELETE',
                params: {
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteLabel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/label/${parameters.labelId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/property`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createContentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/property`,
                method: 'POST',
                data: {
                    key: parameters.key,
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/property/${parameters.key}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createContentPropertyForKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/property/${parameters.key}`,
                method: 'POST',
                data: {
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateContentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/property/${parameters.key}`,
                method: 'PUT',
                data: {
                    value: parameters.value,
                    version: parameters.version,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteContentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/property/${parameters.key}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRestrictionsByOperation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/restriction/byOperation`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRestrictionsForOperation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    publishLegacyDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/blueprint/instance/${parameters.draftId}`,
                method: 'POST',
                params: {
                    status: parameters.status,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    publishSharedDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/content/blueprint/instance/${parameters.draftId}`,
                method: 'PUT',
                params: {
                    status: parameters.status,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Content = Content;
//# sourceMappingURL=content.js.map