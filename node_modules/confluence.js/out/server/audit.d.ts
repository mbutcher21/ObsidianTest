import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
import { Pagination } from '../pagination';
export declare class Audit {
    private client;
    constructor(client: Client);
    /** Fetch a paginated list of AuditRecord instances dating back to a certain time */
    getAuditRecords<T = Pagination<Models.AuditRecord>>(parameters: Parameters.GetAuditRecords | undefined, callback: Callback<T>): Promise<void>;
    /** Fetch a paginated list of AuditRecord instances dating back to a certain time */
    getAuditRecords<T = Pagination<Models.AuditRecord>>(parameters?: Parameters.GetAuditRecords, callback?: never): Promise<T>;
    /** Creates a record in the audit log. */
    createAuditRecord<T = Models.AuditRecord>(parameters: Parameters.CreateAuditRecord, callback: Callback<T>): Promise<void>;
    /** Creates a record in the audit log. */
    createAuditRecord<T = Models.AuditRecord>(parameters: Parameters.CreateAuditRecord, callback?: never): Promise<T>;
    /** Exports audit records as a CSV file or ZIP file. */
    exportAuditRecords<T = ArrayBuffer>(parameters: Parameters.ExportAuditRecords | undefined, callback: Callback<T>): Promise<void>;
    /** Exports audit records as a CSV file or ZIP file. */
    exportAuditRecords<T = ArrayBuffer>(parameters?: Parameters.ExportAuditRecords, callback?: never): Promise<T>;
    /** Fetches the current retention periodResponses */
    getRetentionPeriod<T = Models.RetentionPeriod>(callback: Callback<T>): Promise<void>;
    /** Fetches the current retention periodResponses */
    getRetentionPeriod<T = Models.RetentionPeriod>(callback?: never): Promise<T>;
    /** Set the retention period to a new value. Can throw ServiceException if the retention period is too long */
    setRetentionPeriod<T = Models.RetentionPeriod>(parameters: Models.RetentionPeriod, callback: Callback<T>): Promise<void>;
    /** Set the retention period to a new value. Can throw ServiceException if the retention period is too long */
    setRetentionPeriod<T = Models.RetentionPeriod>(parameters: Models.RetentionPeriod, callback?: never): Promise<T>;
    /** Fetch a paginated list of AuditRecord instances dating back to a certain time */
    getAuditRecordsForTimePeriod<T = Pagination<Models.AuditRecord>>(parameters: Parameters.GetAuditRecordsSince | undefined, callback: Callback<T>): Promise<void>;
    /** Fetch a paginated list of AuditRecord instances dating back to a certain time */
    getAuditRecordsForTimePeriod<T = Pagination<Models.AuditRecord>>(parameters?: Parameters.GetAuditRecordsSince, callback?: never): Promise<T>;
}
