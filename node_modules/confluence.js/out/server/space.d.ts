import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
import { Pagination } from '../pagination';
export declare class Space {
    private client;
    constructor(client: Client);
    /** Returns information about a number of spaces. */
    getSpaces<T = Pagination<Models.Space>>(parameters: Parameters.GetSpaces | undefined, callback: Callback<T>): Promise<void>;
    /** Returns information about a number of spaces. */
    getSpaces<T = Pagination<Models.Space>>(parameters?: Parameters.GetSpaces, callback?: never): Promise<T>;
    /**
     * Creates a new Space.
     *
     * The incoming Space does not include an id, but must include a Key and Name, and should include a Description.
     */
    createSpace<T = Models.Space>(parameters: Parameters.CreateSpace, callback: Callback<T>): Promise<void>;
    /**
     * Creates a new Space.
     *
     * The incoming Space does not include an id, but must include a Key and Name, and should include a Description.
     */
    createSpace<T = Models.Space>(parameters: Parameters.CreateSpace, callback?: never): Promise<T>;
    /**
     * Creates a new private Space, viewable only by its creator.
     *
     * The incoming Space does not include an id, but must include a Key and Name, and should include a Description.
     */
    createPrivateSpace<T = Models.Space>(parameters: Parameters.CreatePrivateSpace, callback: Callback<T>): Promise<void>;
    /**
     * Creates a new private Space, viewable only by its creator.
     *
     * The incoming Space does not include an id, but must include a Key and Name, and should include a Description.
     */
    createPrivateSpace<T = Models.Space>(parameters: Parameters.CreatePrivateSpace, callback?: never): Promise<T>;
    /** Returns information about a space. */
    getSpace<T = Models.Space>(parameters: Parameters.GetSpace, callback: Callback<T>): Promise<void>;
    /** Returns information about a space. */
    getSpace<T = Models.Space>(parameters: Parameters.GetSpace, callback?: never): Promise<T>;
    /** Updates a Space. Currently only the Space name, description and homepage can be updated. */
    updateSpace<T = Models.Space>(parameters: Parameters.UpdateSpace, callback: Callback<T>): Promise<void>;
    /** Updates a Space. Currently only the Space name, description and homepage can be updated. */
    updateSpace<T = Models.Space>(parameters: Parameters.UpdateSpace, callback?: never): Promise<T>;
    /**
     * Deletes a Space.
     *
     * The space is deleted in a long running task, so the space cannot be considered deleted when this resource returns.
     * Clients can follow the status link in the response and poll it until the task completes. Responses
     */
    deleteSpace<T = Models.DeletedSpace>(parameters: Parameters.DeleteSpace, callback: Callback<T>): Promise<void>;
    /**
     * Deletes a Space.
     *
     * The space is deleted in a long running task, so the space cannot be considered deleted when this resource returns.
     * Clients can follow the status link in the response and poll it until the task completes. Responses
     */
    deleteSpace<T = Models.DeletedSpace>(parameters: Parameters.DeleteSpace, callback?: never): Promise<T>;
    /** Returns the content in this given space */
    getContentForSpace<T = Pagination<Models.Content>>(parameters: Parameters.GetContentForSpace, callback: Callback<T>): Promise<void>;
    /** Returns the content in this given space */
    getContentForSpace<T = Pagination<Models.Content>>(parameters: Parameters.GetContentForSpace, callback?: never): Promise<T>;
    /** Returns the content in this given space with the given type */
    getContentByType<T = Pagination<Models.Content>>(parameters: Parameters.GetContentByType, callback: Callback<T>): Promise<void>;
    /** Returns the content in this given space with the given type */
    getContentByType<T = Pagination<Models.Content>>(parameters: Parameters.GetContentByType, callback?: never): Promise<T>;
    /** Returns a paginated list of space properties. */
    getSpaceProperties<T = Pagination<Models.SpaceProperty>>(parameters: Parameters.GetSpaceProperties, callback: Callback<T>): Promise<void>;
    /** Returns a paginated list of space properties. */
    getSpaceProperties<T = Pagination<Models.SpaceProperty>>(parameters: Parameters.GetSpaceProperties, callback?: never): Promise<T>;
    /** Creates a new space property. */
    createSpaceProperty<T = Models.SpaceProperty>(parameters: Parameters.CreateSpaceProperty, callback: Callback<T>): Promise<void>;
    /** Creates a new space property. */
    createSpaceProperty<T = Models.SpaceProperty>(parameters: Parameters.CreateSpaceProperty, callback?: never): Promise<T>;
    /** Returns a paginated list of space properties. */
    getSpaceProperty<T = Models.SpaceProperty>(parameters: Parameters.GetSpaceProperty, callback: Callback<T>): Promise<void>;
    /** Returns a paginated list of space properties. */
    getSpaceProperty<T = Models.SpaceProperty>(parameters: Parameters.GetSpaceProperty, callback?: never): Promise<T>;
    /** Creates a new space property. */
    createSpacePropertyForKey<T = Models.SpaceProperty>(parameters: Parameters.CreateSpacePropertyForKey, callback: Callback<T>): Promise<void>;
    /** Creates a new space property. */
    createSpacePropertyForKey<T = Models.SpaceProperty>(parameters: Parameters.CreateSpacePropertyForKey, callback?: never): Promise<T>;
    /**
     * Updates a space property. The body contains the representation of the space property. Must include new version
     * number. If the given version number is 1, attempts to create a new space property, just like
     * {@link #create(String, com.atlassian.confluence.api.model.content.JsonSpaceProperty)}.
     */
    updateSpaceProperty<T = Models.SpaceProperty>(parameters: Parameters.UpdateSpaceProperty, callback: Callback<T>): Promise<void>;
    /**
     * Updates a space property. The body contains the representation of the space property. Must include new version
     * number. If the given version number is 1, attempts to create a new space property, just like
     * {@link #create(String, com.atlassian.confluence.api.model.content.JsonSpaceProperty)}.
     */
    updateSpaceProperty<T = Models.SpaceProperty>(parameters: Parameters.UpdateSpaceProperty, callback?: never): Promise<T>;
    /** Deletes a space property. */
    deleteSpaceProperty<T = void>(parameters: Parameters.DeleteSpaceProperty, callback: Callback<T>): Promise<void>;
    /** Deletes a space property. */
    deleteSpaceProperty<T = void>(parameters: Parameters.DeleteSpaceProperty, callback?: never): Promise<T>;
}
