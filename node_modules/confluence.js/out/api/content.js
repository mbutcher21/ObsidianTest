"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Content = void 0;
const tslib_1 = require("tslib");
class Content {
    constructor(client) {
        this.client = client;
    }
    getContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/content',
                method: 'GET',
                params: {
                    type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                    title: parameters === null || parameters === void 0 ? void 0 : parameters.title,
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    postingDay: parameters === null || parameters === void 0 ? void 0 : parameters.postingDay,
                    trigger: parameters === null || parameters === void 0 ? void 0 : parameters.trigger,
                    orderby: parameters === null || parameters === void 0 ? void 0 : parameters.orderby,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/content',
                method: 'POST',
                params: {
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
                data: Object.assign(Object.assign({}, parameters), { status: undefined, expand: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    archivePages(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/content/archive',
                method: 'POST',
                data: {
                    pages: parameters.pages,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    publishLegacyDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/blueprint/instance/${parameters.draftId}`,
                method: 'POST',
                params: {
                    status: parameters.status,
                },
                data: Object.assign(Object.assign({}, parameters), { version: parameters.version, title: parameters.title, type: parameters.type, status: parameters.bodyStatus, space: parameters.space, ancestors: parameters.ancestors }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    publishSharedDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/blueprint/instance/${parameters.draftId}`,
                method: 'PUT',
                params: {
                    status: parameters.status,
                },
                data: Object.assign(Object.assign({}, parameters), { version: parameters.version, title: parameters.title, type: parameters.type, status: parameters.bodyStatus, space: parameters.space, ancestors: parameters.ancestors }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchContentByCQL(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/content/search',
                method: 'GET',
                params: {
                    cql: parameters.cql,
                    cqlcontext: parameters.cqlcontext,
                    cursor: parameters.cursor,
                    limit: parameters.limit,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}`,
                method: 'GET',
                params: {
                    status: parameters.status,
                    version: parameters.version,
                    embeddedContentRender: parameters.embeddedContentRender,
                    trigger: parameters.trigger,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}`,
                method: 'PUT',
                params: {
                    status: parameters.status,
                    conflictPolicy: parameters.conflictPolicy,
                },
                data: {
                    version: parameters.version,
                    title: parameters.title,
                    type: parameters.type,
                    status: parameters.statusBody,
                    ancestors: parameters.ancestors,
                    body: parameters.body,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}`,
                method: 'DELETE',
                params: {
                    status: parameters.status,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getHistoryForContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/history`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Content = Content;
//# sourceMappingURL=content.js.map