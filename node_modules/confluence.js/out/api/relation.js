"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relation = void 0;
const tslib_1 = require("tslib");
class Relation {
    constructor(client) {
        this.client = client;
    }
    findTargetFromSource(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/relation/${parameters.relationName}/from/${parameters.sourceType}/${parameters.sourceKey}/to/${parameters.targetType}`,
                method: 'GET',
                params: {
                    sourceStatus: parameters.sourceStatus,
                    targetStatus: parameters.targetStatus,
                    sourceVersion: parameters.sourceVersion,
                    targetVersion: parameters.targetVersion,
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    GetRelationship(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getRelationship(parameters, callback);
        });
    }
    getRelationship(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/relation/${parameters.relationName}/from/${parameters.sourceType}/${parameters.sourceKey}/to/${parameters.targetType}/${parameters.targetKey}`,
                method: 'GET',
                params: {
                    sourceStatus: parameters.sourceStatus,
                    targetStatus: parameters.targetStatus,
                    sourceVersion: parameters.sourceVersion,
                    targetVersion: parameters.targetVersion,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createRelationship(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/relation/${parameters.relationName}/from/${parameters.sourceType}/${parameters.sourceKey}/to/${parameters.targetType}/${parameters.targetKey}`,
                method: 'PUT',
                params: {
                    sourceStatus: parameters.sourceStatus,
                    targetStatus: parameters.targetStatus,
                    sourceVersion: parameters.sourceVersion,
                    targetVersion: parameters.targetVersion,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    delete(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.deleteRelationship(parameters, callback);
        });
    }
    deleteRelationship(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/relation/${parameters.relationName}/from/${parameters.sourceType}/${parameters.sourceKey}/to/${parameters.targetType}/${parameters.targetKey}`,
                method: 'DELETE',
                params: {
                    sourceStatus: parameters.sourceStatus,
                    targetStatus: parameters.targetStatus,
                    sourceVersion: parameters.sourceVersion,
                    targetVersion: parameters.targetVersion,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findSourcesForTarget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/relation/${parameters.relationName}/to/${parameters.targetType}/${parameters.targetKey}/from/${parameters.sourceType}`,
                method: 'GET',
                params: {
                    sourceStatus: parameters.sourceStatus,
                    targetStatus: parameters.targetStatus,
                    sourceVersion: parameters.sourceVersion,
                    targetVersion: parameters.targetVersion,
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Relation = Relation;
//# sourceMappingURL=relation.js.map