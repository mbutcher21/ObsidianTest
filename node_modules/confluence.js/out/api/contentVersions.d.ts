import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class ContentVersions {
    private client;
    constructor(client: Client);
    /**
     * Returns the versions for a piece of content in descending order.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the
     * content is a blog post, 'View' permission for the space is required.
     */
    getContentVersions<T = Models.VersionArray>(parameters: Parameters.GetContentVersions, callback: Callback<T>): Promise<void>;
    /**
     * Returns the versions for a piece of content in descending order.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the
     * content is a blog post, 'View' permission for the space is required.
     */
    getContentVersions<T = Models.VersionArray>(parameters: Parameters.GetContentVersions, callback?: never): Promise<T>;
    /**
     * Restores a historical version to be the latest version. That is, a new version is created with the content of the
     * historical version.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     */
    restoreContentVersion<T = Models.Version>(parameters: Parameters.RestoreContentVersion, callback: Callback<T>): Promise<void>;
    /**
     * Restores a historical version to be the latest version. That is, a new version is created with the content of the
     * historical version.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     */
    restoreContentVersion<T = Models.Version>(parameters: Parameters.RestoreContentVersion, callback?: never): Promise<T>;
    /**
     * Returns a version for a piece of content.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the
     * content is a blog post, 'View' permission for the space is required.
     */
    getContentVersion<T = Models.Version>(parameters: Parameters.GetContentVersion, callback: Callback<T>): Promise<void>;
    /**
     * Returns a version for a piece of content.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the
     * content is a blog post, 'View' permission for the space is required.
     */
    getContentVersion<T = Models.Version>(parameters: Parameters.GetContentVersion, callback?: never): Promise<T>;
    /**
     * Delete a historical version. This does not delete the changes made to the content in that version, rather the
     * changes for the deleted version are rolled up into the next version. Note, you cannot delete the current version.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     */
    deleteContentVersion<T = void>(parameters: Parameters.DeleteContentVersion, callback: Callback<T>): Promise<void>;
    /**
     * Delete a historical version. This does not delete the changes made to the content in that version, rather the
     * changes for the deleted version are rolled up into the next version. Note, you cannot delete the current version.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     */
    deleteContentVersion<T = void>(parameters: Parameters.DeleteContentVersion, callback?: never): Promise<T>;
}
