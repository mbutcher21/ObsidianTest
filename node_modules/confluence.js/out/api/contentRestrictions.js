"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentRestrictions = void 0;
const tslib_1 = require("tslib");
class ContentRestrictions {
    constructor(client) {
        this.client = client;
    }
    getRestrictions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addRestrictions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction`,
                method: 'POST',
                params: {
                    expand: parameters.expand,
                },
                data: parameters.body,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateRestrictions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction`,
                method: 'PUT',
                params: {
                    expand: parameters.expand,
                },
                data: parameters.body,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteRestrictions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction`,
                method: 'DELETE',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRestrictionsByOperation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRestrictionsForOperation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentRestrictionStatusForGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/group/${parameters.groupName}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addGroupToContentRestriction(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/group/${parameters.groupName}`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeGroupByName(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/group/${parameters.groupName}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIndividualGroupRestrictionStatusByGroupId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/byGroupId/${parameters.groupId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addGroupToContentRestrictionByGroupId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/byGroupId/${parameters.groupId}`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeGroupById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/byGroupId/${parameters.groupId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentRestrictionStatusForUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/user`,
                method: 'GET',
                params: {
                    key: parameters.key,
                    userName: parameters.userName,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addUserToContentRestriction(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/user`,
                method: 'PUT',
                params: {
                    key: parameters.key,
                    userName: parameters.userName,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeUserFromContentRestriction(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/restriction/byOperation/${parameters.operationKey}/user`,
                method: 'DELETE',
                params: {
                    key: parameters.key,
                    userName: parameters.userName,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ContentRestrictions = ContentRestrictions;
//# sourceMappingURL=contentRestrictions.js.map