import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class Themes {
    private client;
    constructor(client: Client);
    /**
     * Returns all themes, not including the default theme.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     */
    getThemes<T = Models.ThemeArray>(parameters: Parameters.GetThemes | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Returns all themes, not including the default theme.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     */
    getThemes<T = Models.ThemeArray>(parameters?: Parameters.GetThemes, callback?: never): Promise<T>;
    /**
     * Returns the globally assigned theme.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     */
    getGlobalTheme<T = Models.Theme>(callback: Callback<T>): Promise<void>;
    /**
     * Returns the globally assigned theme.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     */
    getGlobalTheme<T = Models.Theme>(callback?: never): Promise<T>;
    /**
     * Returns a theme. This includes information about the theme name, description, and icon.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     */
    getTheme<T = Models.Theme>(parameters: Parameters.GetTheme, callback: Callback<T>): Promise<void>;
    /**
     * Returns a theme. This includes information about the theme name, description, and icon.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
     */
    getTheme<T = Models.Theme>(parameters: Parameters.GetTheme, callback?: never): Promise<T>;
    /**
     * Returns the theme selected for a space, if one is set. If no space theme is set, this means that the space is
     * inheriting the global look and feel settings.
     *
     * **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     */
    getSpaceTheme<T = Models.Theme>(parameters: Parameters.GetSpaceTheme, callback: Callback<T>): Promise<void>;
    /**
     * Returns the theme selected for a space, if one is set. If no space theme is set, this means that the space is
     * inheriting the global look and feel settings.
     *
     * **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     */
    getSpaceTheme<T = Models.Theme>(parameters: Parameters.GetSpaceTheme, callback?: never): Promise<T>;
    /**
     * Sets the theme for a space. Note, if you want to reset the space theme to the default Confluence theme, use the
     * 'Reset space theme' method instead of this method.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    setSpaceTheme<T = Models.Theme>(parameters: Parameters.SetSpaceTheme, callback: Callback<T>): Promise<void>;
    /**
     * Sets the theme for a space. Note, if you want to reset the space theme to the default Confluence theme, use the
     * 'Reset space theme' method instead of this method.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    setSpaceTheme<T = Models.Theme>(parameters: Parameters.SetSpaceTheme, callback?: never): Promise<T>;
    /**
     * Resets the space theme. This means that the space will inherit the global look and feel settings
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    resetSpaceTheme<T = void>(parameters: Parameters.ResetSpaceTheme, callback: Callback<T>): Promise<void>;
    /**
     * Resets the space theme. This means that the space will inherit the global look and feel settings
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    resetSpaceTheme<T = void>(parameters: Parameters.ResetSpaceTheme, callback?: never): Promise<T>;
}
