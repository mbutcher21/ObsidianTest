"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentChildrenAndDescendants = void 0;
const tslib_1 = require("tslib");
class ContentChildrenAndDescendants {
    constructor(client) {
        this.client = client;
    }
    getContentChildren(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/child`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    parentVersion: parameters.parentVersion,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    movePage(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pageId = parameters.pageId || parameters.id;
            const config = {
                url: `/api/content/${pageId}/move/${parameters.position}/${parameters.targetId}`,
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentChildrenByType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/child/${parameters.type}`,
                method: 'GET',
                params: {
                    parentVersion: parameters.parentVersion,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentDescendants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/descendant`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    descendantsOfType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getDescendantsOfType(parameters, callback);
        });
    }
    getDescendantsOfType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/descendant/${parameters.type}`,
                method: 'GET',
                params: {
                    depth: parameters.depth,
                    start: parameters.start,
                    limit: parameters.limit,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    copyPageHierarchy(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/pagehierarchy/copy`,
                method: 'POST',
                data: {
                    copyAttachments: parameters.copyAttachments,
                    copyPermissions: parameters.copyPermissions,
                    copyProperties: parameters.copyProperties,
                    copyLabels: parameters.copyLabels,
                    copyCustomContents: parameters.copyCustomContents,
                    copyDescendants: parameters.copyDescendants,
                    destinationPageId: parameters.destinationPageId,
                    titleOptions: parameters.titleOptions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    copyPage(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/copy`,
                method: 'POST',
                params: {
                    expand: parameters.expand,
                },
                data: parameters.bodyParameters,
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ContentChildrenAndDescendants = ContentChildrenAndDescendants;
//# sourceMappingURL=contentChildrenAndDescendants.js.map