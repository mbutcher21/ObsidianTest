import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class Space {
    private client;
    constructor(client: Client);
    /**
     * Returns all spaces. The returned spaces are ordered alphabetically in ascending order by space key.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission). Note, the returned list will only contain spaces that the current user has
     * permission to view.
     */
    getSpaces<T = Models.SpaceArray>(parameters: Parameters.GetSpaces | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Returns all spaces. The returned spaces are ordered alphabetically in ascending order by space key.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission). Note, the returned list will only contain spaces that the current user has
     * permission to view.
     */
    getSpaces<T = Models.SpaceArray>(parameters?: Parameters.GetSpaces, callback?: never): Promise<T>;
    /**
     * Creates a new space. Note, currently you cannot set space labels when creating a space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Create Space(s)' global permission.
     */
    createSpace<T = Models.Space>(parameters: Parameters.CreateSpace | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Creates a new space. Note, currently you cannot set space labels when creating a space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Create Space(s)' global permission.
     */
    createSpace<T = Models.Space>(parameters?: Parameters.CreateSpace, callback?: never): Promise<T>;
    /**
     * Creates a new space that is only visible to the creator. This method is the same as the [Create
     * space](#api-space-post) method with permissions set to the current user only. Note, currently you cannot set space
     * labels when creating a space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Create Space(s)' global permission.
     */
    createPrivateSpace<T = Models.Space>(parameters: Parameters.CreatePrivateSpace | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Creates a new space that is only visible to the creator. This method is the same as the [Create
     * space](#api-space-post) method with permissions set to the current user only. Note, currently you cannot set space
     * labels when creating a space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Create Space(s)' global permission.
     */
    createPrivateSpace<T = Models.Space>(parameters?: Parameters.CreatePrivateSpace, callback?: never): Promise<T>;
    /**
     * Returns a space. This includes information like the name, description, and permissions, but not the content in the
     * space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space.
     */
    getSpace<T = Models.Space>(parameters: Parameters.GetSpace, callback: Callback<T>): Promise<void>;
    /**
     * Returns a space. This includes information like the name, description, and permissions, but not the content in the
     * space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space.
     */
    getSpace<T = Models.Space>(parameters: Parameters.GetSpace, callback?: never): Promise<T>;
    /**
     * Updates the name, description, or homepage of a space.
     *
     * - For security reasons, permissions cannot be updated via the API and must be changed via the user interface instead.
     * - Currently you cannot set space labels when updating a space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    updateSpace<T = Models.Space>(parameters: Parameters.UpdateSpace, callback: Callback<T>): Promise<void>;
    /**
     * Updates the name, description, or homepage of a space.
     *
     * - For security reasons, permissions cannot be updated via the API and must be changed via the user interface instead.
     * - Currently you cannot set space labels when updating a space.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    updateSpace<T = Models.Space>(parameters: Parameters.UpdateSpace, callback?: never): Promise<T>;
    /**
     * Deletes a space. Note, the space will be deleted in a long running task. Therefore, the space may not be deleted
     * yet when this method has returned. Clients should poll the status link that is returned in the response until the
     * task completes.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    deleteSpace<T = Models.LongTask>(parameters: Parameters.DeleteSpace, callback: Callback<T>): Promise<void>;
    /**
     * Deletes a space. Note, the space will be deleted in a long running task. Therefore, the space may not be deleted
     * yet when this method has returned. Clients should poll the status link that is returned in the response until the
     * task completes.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Admin' permission for the space.
     */
    deleteSpace<T = Models.LongTask>(parameters: Parameters.DeleteSpace, callback?: never): Promise<T>;
    /**
     * Returns all content in a space. The returned content is grouped by type (pages then blogposts), then ordered by
     * content ID in ascending order.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space. Note, the
     * returned list will only contain content that the current user has permission to view.
     */
    getContentForSpace<T = Models.ContentArray>(parameters: Parameters.GetContentForSpace, callback: Callback<T>): Promise<void>;
    /**
     * Returns all content in a space. The returned content is grouped by type (pages then blogposts), then ordered by
     * content ID in ascending order.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space. Note, the
     * returned list will only contain content that the current user has permission to view.
     */
    getContentForSpace<T = Models.ContentArray>(parameters: Parameters.GetContentForSpace, callback?: never): Promise<T>;
    /**
     * Returns all content of a given type, in a space. The returned content is ordered by content ID in ascending order.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space. Note, the
     * returned list will only contain content that the current user has permission to view.
     */
    getContentByTypeForSpace<T = Models.ContentArray>(parameters: Parameters.GetContentByTypeForSpace, callback: Callback<T>): Promise<void>;
    /**
     * Returns all content of a given type, in a space. The returned content is ordered by content ID in ascending order.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space. Note, the
     * returned list will only contain content that the current user has permission to view.
     */
    getContentByTypeForSpace<T = Models.ContentArray>(parameters: Parameters.GetContentByTypeForSpace, callback?: never): Promise<T>;
}
