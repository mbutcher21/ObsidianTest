"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Experimental = void 0;
const tslib_1 = require("tslib");
class Experimental {
    constructor(client) {
        this.client = client;
    }
    deletePageTree(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/pageTree`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getLabelsForSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/label`,
                method: 'GET',
                params: {
                    prefix: parameters.prefix,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addLabelsToSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/label`,
                method: 'POST',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteLabelFromSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/label`,
                method: 'DELETE',
                params: {
                    name: parameters.name,
                    prefix: parameters.prefix,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getUserProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/${parameters.userId}/property`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/${parameters.userId}/property/${parameters.key}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/${parameters.userId}/property/${parameters.key}`,
                method: 'POST',
                data: {
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/${parameters.userId}/property/${parameters.key}`,
                method: 'PUT',
                data: {
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/${parameters.userId}/property/${parameters.key}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getViewers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/analytics/content/${parameters.contentId}/viewers`,
                method: 'GET',
                params: {
                    fromDate: parameters.fromDate,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Experimental = Experimental;
//# sourceMappingURL=experimental.js.map