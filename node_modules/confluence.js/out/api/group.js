"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = void 0;
const tslib_1 = require("tslib");
class Group {
    constructor(client) {
        this.client = client;
    }
    getGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group',
                method: 'GET',
                params: {
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                    accessType: parameters === null || parameters === void 0 ? void 0 : parameters.accessType,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group',
                method: 'POST',
                data: {
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group',
                method: 'DELETE',
                params: {
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGroupByQueryParam(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/by-name',
                method: 'GET',
                params: {
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGroupByGroupId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/by-id',
                method: 'GET',
                params: {
                    id: parameters.id,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeGroupById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/by-id',
                method: 'DELETE',
                params: {
                    id: parameters.id,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getGroupByName(parameters, callback);
        });
    }
    getGroupByName(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/group/${parameters.groupName}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getMembersByQueryParam(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/member',
                method: 'GET',
                params: {
                    name: parameters.name,
                    start: parameters.start,
                    limit: parameters.limit,
                    shouldReturnTotalSize: parameters.shouldReturnTotalSize,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGroupMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/group/${parameters.groupName}/member`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGroupsSearch(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.searchGroups(parameters, callback);
        });
    }
    searchGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/picker',
                method: 'GET',
                params: {
                    query: parameters.query,
                    start: parameters.start,
                    limit: parameters.limit,
                    shouldReturnTotalSize: parameters.shouldReturnTotalSize,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addUserToGroupByGroupId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/userByGroupId',
                method: 'POST',
                params: {
                    groupId: parameters.groupId,
                },
                data: {
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeMemberFromGroupByGroupId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/userByGroupId',
                method: 'DELETE',
                params: {
                    groupId: parameters.groupId,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGroupMembersByGroupId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/group/${parameters.groupId}/membersByGroupId`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                    shouldReturnTotalSize: parameters.shouldReturnTotalSize,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addUserToGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/user',
                method: 'POST',
                params: {
                    name: parameters.name,
                },
                data: {
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeMemberFromGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/group/user',
                method: 'DELETE',
                params: {
                    name: parameters.name,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Group = Group;
//# sourceMappingURL=group.js.map