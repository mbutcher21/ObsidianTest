import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class ContentWatches {
    private client;
    constructor(client: Client);
    /**
     * Returns the watches for a page. A user that watches a page will receive receive notifications when the page is
     * updated.
     *
     * If you want to manage watches for a page, use the following `user` methods:
     *
     * - [Get content watch status for user](#api-user-watch-content-contentId-get)
     * - [Add content watch](#api-user-watch-content-contentId-post)
     * - [Remove content watch](#api-user-watch-content-contentId-delete)
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getWatchesForPage<T = Models.WatchArray>(parameters: Parameters.GetWatchesForPage, callback: Callback<T>): Promise<void>;
    /**
     * Returns the watches for a page. A user that watches a page will receive receive notifications when the page is
     * updated.
     *
     * If you want to manage watches for a page, use the following `user` methods:
     *
     * - [Get content watch status for user](#api-user-watch-content-contentId-get)
     * - [Add content watch](#api-user-watch-content-contentId-post)
     * - [Remove content watch](#api-user-watch-content-contentId-delete)
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getWatchesForPage<T = Models.WatchArray>(parameters: Parameters.GetWatchesForPage, callback?: never): Promise<T>;
    /**
     * Returns all space watches for the space that the content is in. A user that watches a space will receive receive
     * notifications when any content in the space is updated.
     *
     * If you want to manage watches for a space, use the following `user` methods:
     *
     * - [Get space watch status for user](#api-user-watch-space-spaceKey-get)
     * - [Add space watch](#api-user-watch-space-spaceKey-post)
     * - [Remove space watch](#api-user-watch-space-spaceKey-delete)
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getWatchesForSpace<T = Models.SpaceWatchArray>(parameters: Parameters.GetWatchesForSpace, callback: Callback<T>): Promise<void>;
    /**
     * Returns all space watches for the space that the content is in. A user that watches a space will receive receive
     * notifications when any content in the space is updated.
     *
     * If you want to manage watches for a space, use the following `user` methods:
     *
     * - [Get space watch status for user](#api-user-watch-space-spaceKey-get)
     * - [Add space watch](#api-user-watch-space-spaceKey-post)
     * - [Remove space watch](#api-user-watch-space-spaceKey-delete)
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getWatchesForSpace<T = Models.SpaceWatchArray>(parameters: Parameters.GetWatchesForSpace, callback?: never): Promise<T>;
    /** Returns a list of watchers of a space */
    getWatchersForSpace<T = Models.SpaceWatchArray>(parameters: Parameters.GetWatchersForSpace, callback: Callback<T>): Promise<void>;
    /** Returns a list of watchers of a space */
    getWatchersForSpace<T = Models.SpaceWatchArray>(parameters: Parameters.GetWatchersForSpace, callback?: never): Promise<T>;
    /**
     * Returns whether a user is watching a piece of content. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    getContentWatchStatus<T = Models.UserWatch>(parameters: Parameters.GetContentWatchStatus, callback: Callback<T>): Promise<void>;
    /**
     * Returns whether a user is watching a piece of content. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    getContentWatchStatus<T = Models.UserWatch>(parameters: Parameters.GetContentWatchStatus, callback?: never): Promise<T>;
    /**
     * Adds a user as a watcher to a piece of content. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF
     * protection.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    addContentWatcher<T = void>(parameters: Parameters.AddContentWatcher, callback: Callback<T>): Promise<void>;
    /**
     * Adds a user as a watcher to a piece of content. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF
     * protection.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    addContentWatcher<T = void>(parameters: Parameters.AddContentWatcher, callback?: never): Promise<T>;
    /**
     * Removes a user as a watcher from a piece of content. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    removeContentWatcher<T = void>(parameters: Parameters.RemoveContentWatcher, callback: Callback<T>): Promise<void>;
    /**
     * Removes a user as a watcher from a piece of content. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    removeContentWatcher<T = void>(parameters: Parameters.RemoveContentWatcher, callback?: never): Promise<T>;
    /**
     * Returns whether a user is watching a label. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    isWatchingLabel<T = Models.UserWatch>(parameters: Parameters.IsWatchingLabel, callback: Callback<T>): Promise<void>;
    /**
     * Returns whether a user is watching a label. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    isWatchingLabel<T = Models.UserWatch>(parameters: Parameters.IsWatchingLabel, callback?: never): Promise<T>;
    /**
     * Adds a user as a watcher to a label. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF
     * protection.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    addLabelWatcher<T = void>(parameters: Parameters.AddLabelWatcher, callback: Callback<T>): Promise<void>;
    /**
     * Adds a user as a watcher to a label. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF
     * protection.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    addLabelWatcher<T = void>(parameters: Parameters.AddLabelWatcher, callback?: never): Promise<T>;
    /**
     * Removes a user as a watcher from a label. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    removeLabelWatcher<T = void>(parameters: Parameters.RemoveLabelWatcher, callback: Callback<T>): Promise<void>;
    /**
     * Removes a user as a watcher from a label. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    removeLabelWatcher<T = void>(parameters: Parameters.RemoveLabelWatcher, callback?: never): Promise<T>;
    /**
     * Returns whether a user is watching a space. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    isWatchingSpace<T = Models.UserWatch>(parameters: Parameters.IsWatchingSpace, callback: Callback<T>): Promise<void>;
    /**
     * Returns whether a user is watching a space. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    isWatchingSpace<T = Models.UserWatch>(parameters: Parameters.IsWatchingSpace, callback?: never): Promise<T>;
    /**
     * Adds a user as a watcher to a space. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF
     * protection.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    addSpaceWatcher<T = void>(parameters: Parameters.AddSpaceWatcher, callback: Callback<T>): Promise<void>;
    /**
     * Adds a user as a watcher to a space. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * Note, you must add the `X-Atlassian-Token: no-check` header when making a request, as this operation has XSRF
     * protection.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    addSpaceWatcher<T = void>(parameters: Parameters.AddSpaceWatcher, callback?: never): Promise<T>;
    /**
     * Removes a user as a watcher from a space. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    removeSpaceWatch<T = void>(parameters: Parameters.RemoveSpaceWatch, callback: Callback<T>): Promise<void>;
    /**
     * Removes a user as a watcher from a space. Choose the user by doing one of the following:
     *
     * - Specify a user via a query parameter: Use the `accountId` to identify the user.
     * - Do not specify a user: The currently logged-in user will be used.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Confluence Administrator' global permission
     * if specifying a user, otherwise permission to access the Confluence site ('Can use' global permission).
     */
    removeSpaceWatch<T = void>(parameters: Parameters.RemoveSpaceWatch, callback?: never): Promise<T>;
}
