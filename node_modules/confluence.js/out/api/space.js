"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Space = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class Space {
    constructor(client) {
        this.client = client;
    }
    getSpaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/space',
                method: 'GET',
                params: {
                    spaceKey: (0, paramSerializer_1.paramSerializer)('spaceKey', parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey),
                    spaceId: parameters === null || parameters === void 0 ? void 0 : parameters.spaceId,
                    type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    label: parameters === null || parameters === void 0 ? void 0 : parameters.label,
                    favourite: parameters === null || parameters === void 0 ? void 0 : parameters.favourite,
                    favouriteUserKey: parameters === null || parameters === void 0 ? void 0 : parameters.favouriteUserKey,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/space',
                method: 'POST',
                data: {
                    key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    permissions: parameters === null || parameters === void 0 ? void 0 : parameters.permissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createPrivateSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/space/_private',
                method: 'POST',
                data: {
                    key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    permissions: parameters === null || parameters === void 0 ? void 0 : parameters.permissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    homepage: parameters.homepage,
                    type: parameters.type,
                    status: parameters.status,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentForSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/content`,
                method: 'GET',
                params: {
                    depth: parameters.depth,
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentByTypeForSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/content/${parameters.type}`,
                method: 'GET',
                params: {
                    depth: parameters.depth,
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Space = Space;
//# sourceMappingURL=space.js.map