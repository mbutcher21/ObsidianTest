"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = void 0;
const tslib_1 = require("tslib");
class Settings {
    constructor(client) {
        this.client = client;
    }
    getLookAndFeelSettings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/lookandfeel',
                method: 'GET',
                params: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateLookAndFeel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/lookandfeel',
                method: 'PUT',
                data: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                    lookAndFeelType: parameters === null || parameters === void 0 ? void 0 : parameters.lookAndFeelType,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateLookAndFeelSettings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/lookandfeel/custom',
                method: 'POST',
                params: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                },
                data: {
                    headings: parameters === null || parameters === void 0 ? void 0 : parameters.headings,
                    links: parameters === null || parameters === void 0 ? void 0 : parameters.links,
                    menus: parameters === null || parameters === void 0 ? void 0 : parameters.menus,
                    header: parameters === null || parameters === void 0 ? void 0 : parameters.header,
                    horizontalHeader: parameters === null || parameters === void 0 ? void 0 : parameters.horizontalHeader,
                    content: parameters === null || parameters === void 0 ? void 0 : parameters.content,
                    bordersAndDividers: parameters === null || parameters === void 0 ? void 0 : parameters.bordersAndDividers,
                    spaceReference: parameters === null || parameters === void 0 ? void 0 : parameters.spaceReference,
                    _links: parameters === null || parameters === void 0 ? void 0 : parameters.links,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    resetLookAndFeelSettings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/lookandfeel/custom',
                method: 'DELETE',
                params: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setLookAndFeelSettings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/lookandfeel/selected',
                method: 'PUT',
                params: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSystemInfo(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/systemInfo',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentStateSettings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/state/settings`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Settings = Settings;
//# sourceMappingURL=settings.js.map