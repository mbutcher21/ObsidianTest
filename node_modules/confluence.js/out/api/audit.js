"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Audit = void 0;
const tslib_1 = require("tslib");
class Audit {
    constructor(client) {
        this.client = client;
    }
    getAuditRecords(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/audit',
                method: 'GET',
                params: {
                    startDate: parameters === null || parameters === void 0 ? void 0 : parameters.startDate,
                    endDate: parameters === null || parameters === void 0 ? void 0 : parameters.endDate,
                    searchString: parameters === null || parameters === void 0 ? void 0 : parameters.searchString,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createAuditRecord(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/audit',
                method: 'POST',
                data: {
                    author: parameters === null || parameters === void 0 ? void 0 : parameters.author,
                    remoteAddress: parameters === null || parameters === void 0 ? void 0 : parameters.remoteAddress,
                    creationDate: parameters === null || parameters === void 0 ? void 0 : parameters.creationDate,
                    summary: parameters === null || parameters === void 0 ? void 0 : parameters.summary,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    category: parameters === null || parameters === void 0 ? void 0 : parameters.category,
                    sysAdmin: parameters === null || parameters === void 0 ? void 0 : parameters.sysAdmin,
                    affectedObject: parameters === null || parameters === void 0 ? void 0 : parameters.affectedObject,
                    changedValues: parameters === null || parameters === void 0 ? void 0 : parameters.changedValues,
                    associatedObjects: parameters === null || parameters === void 0 ? void 0 : parameters.associatedObjects,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    exportAuditRecords(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/audit/export',
                method: 'GET',
                params: {
                    startDate: parameters === null || parameters === void 0 ? void 0 : parameters.startDate,
                    endDate: parameters === null || parameters === void 0 ? void 0 : parameters.endDate,
                    searchString: parameters === null || parameters === void 0 ? void 0 : parameters.searchString,
                    format: parameters === null || parameters === void 0 ? void 0 : parameters.format,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRetentionPeriod(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/audit/retention',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setRetentionPeriod(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/audit/retention',
                method: 'PUT',
                data: {
                    number: parameters === null || parameters === void 0 ? void 0 : parameters.number,
                    units: parameters === null || parameters === void 0 ? void 0 : parameters.units,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAuditRecordsForTimePeriod(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/audit/since',
                method: 'GET',
                params: {
                    number: parameters === null || parameters === void 0 ? void 0 : parameters.number,
                    units: parameters === null || parameters === void 0 ? void 0 : parameters.units,
                    searchString: parameters === null || parameters === void 0 ? void 0 : parameters.searchString,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Audit = Audit;
//# sourceMappingURL=audit.js.map