"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Template = void 0;
const tslib_1 = require("tslib");
class Template {
    constructor(client) {
        this.client = client;
    }
    createContentTemplate(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/template',
                method: 'POST',
                data: {
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    templateType: parameters === null || parameters === void 0 ? void 0 : parameters.templateType,
                    body: parameters === null || parameters === void 0 ? void 0 : parameters.body,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    labels: parameters === null || parameters === void 0 ? void 0 : parameters.labels,
                    space: parameters === null || parameters === void 0 ? void 0 : parameters.space,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateContentTemplate(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/template',
                method: 'PUT',
                data: {
                    templateId: parameters === null || parameters === void 0 ? void 0 : parameters.templateId,
                    name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
                    templateType: parameters === null || parameters === void 0 ? void 0 : parameters.templateType,
                    body: parameters === null || parameters === void 0 ? void 0 : parameters.body,
                    description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
                    labels: parameters === null || parameters === void 0 ? void 0 : parameters.labels,
                    space: parameters === null || parameters === void 0 ? void 0 : parameters.space,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getBlueprintTemplates(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/template/blueprint',
                method: 'GET',
                params: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentTemplates(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/template/page',
                method: 'GET',
                params: {
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentTemplate(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/template/${parameters.contentTemplateId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeTemplate(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/template/${parameters.contentTemplateId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Template = Template;
//# sourceMappingURL=template.js.map