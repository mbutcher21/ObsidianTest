"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentWatches = void 0;
const tslib_1 = require("tslib");
class ContentWatches {
    constructor(client) {
        this.client = client;
    }
    getWatchesForPage(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/notification/child-created`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWatchesForSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/notification/created`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWatchersForSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/watch`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getContentWatchStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/content/${parameters.contentId}`,
                method: 'GET',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addContentWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/content/${parameters.contentId}`,
                method: 'POST',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeContentWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/content/${parameters.contentId}`,
                method: 'DELETE',
                headers: {
                    'X-Atlassian-Token': parameters['X-Atlassian-Token'],
                },
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    isWatchingLabel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/label/${parameters.labelName}`,
                method: 'GET',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addLabelWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/label/${parameters.labelName}`,
                method: 'POST',
                headers: {
                    'X-Atlassian-Token': parameters['X-Atlassian-Token'],
                },
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeLabelWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/label/${parameters.labelName}`,
                method: 'DELETE',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    isWatchingSpace(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/space/${parameters.spaceKey}`,
                method: 'GET',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addSpaceWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/space/${parameters.spaceKey}`,
                method: 'POST',
                headers: {
                    'X-Atlassian-Token': parameters['X-Atlassian-Token'],
                },
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeSpaceWatch(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/user/watch/space/${parameters.spaceKey}`,
                method: 'DELETE',
                params: {
                    key: parameters.key,
                    username: parameters.username,
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ContentWatches = ContentWatches;
//# sourceMappingURL=contentWatches.js.map