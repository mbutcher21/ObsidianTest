"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineTasks = void 0;
const tslib_1 = require("tslib");
class InlineTasks {
    constructor(client) {
        this.client = client;
    }
    searchTasks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/inlinetasks/search',
                method: 'GET',
                params: {
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                    spaceKey: parameters === null || parameters === void 0 ? void 0 : parameters.spaceKey,
                    pageId: parameters === null || parameters === void 0 ? void 0 : parameters.pageId,
                    assignee: parameters === null || parameters === void 0 ? void 0 : parameters.assignee,
                    creator: parameters === null || parameters === void 0 ? void 0 : parameters.creator,
                    completedUser: parameters === null || parameters === void 0 ? void 0 : parameters.completedUser,
                    duedateFrom: parameters === null || parameters === void 0 ? void 0 : parameters.duedateFrom,
                    duedateTo: parameters === null || parameters === void 0 ? void 0 : parameters.duedateTo,
                    createdateFrom: parameters === null || parameters === void 0 ? void 0 : parameters.createdateFrom,
                    createdateTo: parameters === null || parameters === void 0 ? void 0 : parameters.createdateTo,
                    completedateFrom: parameters === null || parameters === void 0 ? void 0 : parameters.completedateFrom,
                    completedateTo: parameters === null || parameters === void 0 ? void 0 : parameters.completedateTo,
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getTaskById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/inlinetasks/${parameters.inlineTaskId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateTaskById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/inlinetasks/${parameters.inlineTaskId}`,
                method: 'PUT',
                data: {
                    status: parameters.status,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.InlineTasks = InlineTasks;
//# sourceMappingURL=inlineTasks.js.map