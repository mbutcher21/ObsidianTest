"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Themes = void 0;
const tslib_1 = require("tslib");
class Themes {
    constructor(client) {
        this.client = client;
    }
    getThemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/theme',
                method: 'GET',
                params: {
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getGlobalTheme(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/api/settings/theme/selected',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getTheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/settings/theme/${parameters.themeKey}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSpaceTheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/theme`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setSpaceTheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/theme`,
                method: 'PUT',
                data: {
                    themeKey: parameters.themeKey,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    resetSpaceTheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/space/${parameters.spaceKey}/theme`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Themes = Themes;
//# sourceMappingURL=themes.js.map