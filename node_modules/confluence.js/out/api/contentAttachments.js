"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentAttachments = void 0;
const tslib_1 = require("tslib");
const FormData = require("form-data");
class ContentAttachments {
    constructor(client) {
        this.client = client;
    }
    getAttachments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/child/attachment`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                    filename: parameters.filename,
                    mediaType: parameters.mediaType,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createAttachments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const formData = new FormData();
            const attachments = Array.isArray(parameters.attachments) ? parameters.attachments : [parameters.attachments];
            attachments.forEach(attachment => {
                formData.append('minorEdit', attachment.minorEdit.toString(), 'minorEdit');
                formData.append('file', attachment.file, {
                    filename: attachment.filename,
                    contentType: attachment.contentType,
                });
                if (attachment.comment) {
                    formData.append('comment', attachment.comment, 'comment');
                }
            });
            const config = {
                url: `/api/content/${parameters.id}/child/attachment`,
                method: 'POST',
                headers: Object.assign({ 'X-Atlassian-Token': 'no-check', 'Content-Type': 'multipart/form-data' }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
                params: {
                    status: parameters.status,
                },
                data: formData,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createOrUpdateAttachments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const formData = new FormData();
            const attachments = Array.isArray(parameters.attachments) ? parameters.attachments : [parameters.attachments];
            attachments.forEach(attachment => {
                formData.append('minorEdit', attachment.minorEdit.toString(), 'minorEdit');
                formData.append('file', attachment.file, {
                    filename: attachment.filename,
                    contentType: attachment.contentType,
                });
                if (attachment.comment) {
                    formData.append('comment', attachment.comment, 'comment');
                }
            });
            const config = {
                url: `/api/content/${parameters.id}/child/attachment`,
                method: 'PUT',
                headers: Object.assign({ 'X-Atlassian-Token': 'no-check', 'Content-Type': 'multipart/form-data' }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
                params: {
                    status: parameters.status,
                },
                data: formData,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateAttachmentProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const config = {
                url: `/api/content/${parameters.id}/child/attachment/${parameters.attachmentId}`,
                method: 'PUT',
                data: (_a = parameters.update) !== null && _a !== void 0 ? _a : parameters.body,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateAttachmentData(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const { attachment } = parameters;
            const formData = new FormData();
            formData.append('minorEdit', attachment.minorEdit.toString(), 'minorEdit');
            formData.append('file', attachment.file, {
                filename: attachment.filename,
                contentType: attachment.contentType,
            });
            if (attachment.comment) {
                formData.append('comment', attachment.comment, 'comment');
            }
            const config = {
                url: `/api/content/${parameters.id}/child/attachment/${parameters.attachmentId}/data`,
                method: 'POST',
                headers: Object.assign({ 'X-Atlassian-Token': 'no-check', 'Content-Type': 'multipart/form-data' }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
                data: formData,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    downloadAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/api/content/${parameters.id}/child/attachment/${parameters.attachmentId}/download`,
                method: 'GET',
                responseType: 'arraybuffer',
                params: {
                    version: parameters.version,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ContentAttachments = ContentAttachments;
//# sourceMappingURL=contentAttachments.js.map