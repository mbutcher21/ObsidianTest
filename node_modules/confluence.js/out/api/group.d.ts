import * as Models from './models';
import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class Group {
    private client;
    constructor(client: Client);
    /**
     * Returns all user groups. The returned groups are ordered alphabetically in ascending order by group name.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroups<T = Models.GroupArrayWithLinks>(parameters: Parameters.GetGroups | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Returns all user groups. The returned groups are ordered alphabetically in ascending order by group name.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroups<T = Models.GroupArrayWithLinks>(parameters?: Parameters.GetGroups, callback?: never): Promise<T>;
    /**
     * Creates a new user group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    createGroup<T = Models.Group>(parameters: Parameters.CreateGroup | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Creates a new user group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    createGroup<T = Models.Group>(parameters?: Parameters.CreateGroup, callback?: never): Promise<T>;
    /**
     * Delete user group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeGroup<T = void>(parameters: Parameters.RemoveGroup, callback: Callback<T>): Promise<void>;
    /**
     * Delete user group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeGroup<T = void>(parameters: Parameters.RemoveGroup, callback?: never): Promise<T>;
    /**
     * Returns a user group for a given group name.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupByQueryParam<T = Models.Group>(parameters: Parameters.GetGroupByQueryParam, callback: Callback<T>): Promise<void>;
    /**
     * Returns a user group for a given group name.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupByQueryParam<T = Models.Group>(parameters: Parameters.GetGroupByQueryParam, callback?: never): Promise<T>;
    /**
     * Returns a user group for a given group id.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupByGroupId<T = Models.Group>(parameters: Parameters.GetGroupByGroupId, callback: Callback<T>): Promise<void>;
    /**
     * Returns a user group for a given group id.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupByGroupId<T = Models.Group>(parameters: Parameters.GetGroupByGroupId, callback?: never): Promise<T>;
    /**
     * Delete user group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeGroupById<T = void>(parameters: Parameters.RemoveGroupById, callback: Callback<T>): Promise<void>;
    /**
     * Delete user group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeGroupById<T = void>(parameters: Parameters.RemoveGroupById, callback?: never): Promise<T>;
    /** @deprecated Will be removed in the next major version. Use `getGroupByName` instead. */
    getGroup<T = Models.Group>(parameters: Parameters.GetGroup, callback: Callback<T>): Promise<void>;
    /** @deprecated Will be removed in the next major version. Use `getGroupByName` instead. */
    getGroup<T = Models.Group>(parameters: Parameters.GetGroup, callback?: never): Promise<T>;
    /**
     * Returns a user group for a given group name.
     *
     * Use updated Get group API
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupByName<T = Models.Group>(parameters: Parameters.GetGroupByName, callback: Callback<T>): Promise<void>;
    /**
     * Returns a user group for a given group name.
     *
     * Use updated Get group API
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupByName<T = Models.Group>(parameters: Parameters.GetGroupByName, callback?: never): Promise<T>;
    /**
     * Returns the users that are members of a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getMembersByQueryParam<T = Models.UserArray>(parameters: Parameters.GetMembersByQueryParam, callback: Callback<T>): Promise<void>;
    /**
     * Returns the users that are members of a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getMembersByQueryParam<T = Models.UserArray>(parameters: Parameters.GetMembersByQueryParam, callback?: never): Promise<T>;
    /**
     * Returns the users that are members of a group.
     *
     * Use updated Get group API
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupMembers<T = Models.UserArray>(parameters: Parameters.GetGroupMembers, callback: Callback<T>): Promise<void>;
    /**
     * Returns the users that are members of a group.
     *
     * Use updated Get group API
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupMembers<T = Models.UserArray>(parameters: Parameters.GetGroupMembers, callback?: never): Promise<T>;
    /** @deprecated Will be removed in the next major version. Use `searchGroups` instead. */
    getGroupsSearch<T = Models.GroupArrayWithLinks>(parameters: Parameters.GetGroupsSearch, callback: Callback<T>): Promise<void>;
    /** @deprecated Will be removed in the next major version. Use `searchGroups` instead. */
    getGroupsSearch<T = Models.GroupArrayWithLinks>(parameters: Parameters.GetGroupsSearch, callback?: never): Promise<T>;
    /** Get search results of groups by partial query provided. */
    searchGroups<T = Models.GroupArrayWithLinks>(parameters: Parameters.SearchGroups, callback: Callback<T>): Promise<void>;
    /** Get search results of groups by partial query provided. */
    searchGroups<T = Models.GroupArrayWithLinks>(parameters: Parameters.SearchGroups, callback?: never): Promise<T>;
    /**
     * Adds a user as a member in a group represented by its groupId
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    addUserToGroupByGroupId<T = unknown>(parameters: Parameters.AddUserToGroupByGroupId, callback: Callback<T>): Promise<void>;
    /**
     * Adds a user as a member in a group represented by its groupId
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    addUserToGroupByGroupId<T = unknown>(parameters: Parameters.AddUserToGroupByGroupId, callback?: never): Promise<T>;
    /**
     * Remove user as a member from a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeMemberFromGroupByGroupId<T = void>(parameters: Parameters.RemoveMemberFromGroupByGroupId, callback: Callback<T>): Promise<void>;
    /**
     * Remove user as a member from a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeMemberFromGroupByGroupId<T = void>(parameters: Parameters.RemoveMemberFromGroupByGroupId, callback?: never): Promise<T>;
    /**
     * Returns the users that are members of a group.
     *
     * Use updated Get group API
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupMembersByGroupId<T = Models.UserArray>(parameters: Parameters.GetGroupMembersByGroupId, callback: Callback<T>): Promise<void>;
    /**
     * Returns the users that are members of a group.
     *
     * Use updated Get group API
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site
     * ('Can use' global permission).
     */
    getGroupMembersByGroupId<T = Models.UserArray>(parameters: Parameters.GetGroupMembersByGroupId, callback?: never): Promise<T>;
    /**
     * Adds a user as a member in a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    addUserToGroup<T = unknown>(parameters: Parameters.AddUserToGroup, callback: Callback<T>): Promise<void>;
    /**
     * Adds a user as a member in a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    addUserToGroup<T = unknown>(parameters: Parameters.AddUserToGroup, callback?: never): Promise<T>;
    /**
     * Remove user as a member from a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeMemberFromGroup<T = void>(parameters: Parameters.RemoveMemberFromGroup, callback: Callback<T>): Promise<void>;
    /**
     * Remove user as a member from a group.
     *
     * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: User must be a site admin.
     */
    removeMemberFromGroup<T = void>(parameters: Parameters.RemoveMemberFromGroup, callback?: never): Promise<T>;
}
