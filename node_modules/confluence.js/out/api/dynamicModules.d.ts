import * as Parameters from './parameters';
import { Callback } from '../callback';
import { Client } from '../clients';
export declare class DynamicModules {
    private client;
    constructor(client: Client);
    /**
     * Returns all modules registered dynamically by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    getModules<T = unknown>(callback: Callback<T>): Promise<void>;
    /**
     * Returns all modules registered dynamically by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    getModules<T = unknown>(callback?: never): Promise<T>;
    /**
     * Registers a list of modules. For the list of modules that support dynamic registration, see [Dynamic
     * modules](https://developer.atlassian.com/cloud/confluence/dynamic-modules/).
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    registerModules<T = unknown>(parameters: Parameters.RegisterModules | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Registers a list of modules. For the list of modules that support dynamic registration, see [Dynamic
     * modules](https://developer.atlassian.com/cloud/confluence/dynamic-modules/).
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    registerModules<T = unknown>(parameters?: Parameters.RegisterModules, callback?: never): Promise<T>;
    /**
     * Remove all or a list of modules registered by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    removeModules<T = void>(parameters: Parameters.RemoveModules, callback: Callback<T>): Promise<void>;
    /**
     * Remove all or a list of modules registered by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    removeModules<T = void>(parameters: Parameters.RemoveModules, callback?: never): Promise<T>;
}
